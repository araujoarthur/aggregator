// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (
   id,
   created_at,
   updated_at,
   name,
   url,
   user_id
)values(
   $1,
   $2,
   $3,
   $4,
   $5,
   $6
) RETURNING id, created_at, updated_at, name, url, user_id
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Name      string
	Url       sql.NullString
	UserID    uuid.NullUUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, created_at, updated_at, name, url, user_id FROM feeds WHERE url=$1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url sql.NullString) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, created_at, updated_at, name, url, user_id FROM feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsWithUserInfo = `-- name: GetFeedsWithUserInfo :many

SELECT feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.user_id, users.id, users.created_at, users.updated_at, users.name FROM feeds INNER JOIN users ON users.id = feeds.user_id
`

type GetFeedsWithUserInfoRow struct {
	Feed Feed
	User User
}

func (q *Queries) GetFeedsWithUserInfo(ctx context.Context) ([]GetFeedsWithUserInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsWithUserInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsWithUserInfoRow
	for rows.Next() {
		var i GetFeedsWithUserInfoRow
		if err := rows.Scan(
			&i.Feed.ID,
			&i.Feed.CreatedAt,
			&i.Feed.UpdatedAt,
			&i.Feed.Name,
			&i.Feed.Url,
			&i.Feed.UserID,
			&i.User.ID,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
